<script>
var loadingHtml = '<div class="spinner-border spinner-border-sm" role="status"><span class="visually-hidden">Loading...</span></div>';
$(function() {
	$("#editor").on("keydown keyup change",function(e) {
		updateSandbox()
		processHtmlChange()
	})
initSandbox();
processHtmlChange()
})


function initSandbox() {
	let rawHtml = $("#editor").val()
	$("#sandbox").html(rawHtml)
	$("#showCode").html(wrapCode(rawHtml,true))
	$("#sandBoxCode").html(highlightJsRender(rawHtml))
}

function updateSandbox() {
	$("#sandbox_status").html(loadingHtml)
		setTimeout(()=>{
			$("#sandbox_status").html("")
		},2000)

		let rawHtml = $("#editor").val()
		$("#sandbox").html(rawHtml)
		//$("#showCode").html(wrapCode(rawHtml,true))
		$("#sandBoxCode").html(highlightJsRender(rawHtml))

		//postDiffCode($("#editor").val(),'t2here changed')

		//hljs.initHighlightingOnLoad();
		//alert(highlightJsRender('<div>Testing</div>'))

//		let demoHtml = '<div>Testing</div>'
//		$("#showCode").html(wrapCode(highlightJsRender(rawHtml)))

//		$("#sandBoxCode").html(highlightJsRender($("#sandBoxCode").html()))

		//$("#showCode").html(highlightJsRender(wrapCode(rawHtml,true)))

		//updateHighlightJs()
//		hljs.highlightAll(); 
		// html = hljs.highlightAuto('<h1>Hello World!</h1>').value
		// html = hljs.highlight('<h1>Hello World!</h1>', {language: 'xml'}).value
}

function getTextDiff(url,postData,dataType) {
	dataType = dataType || 'json'
	return new Promise((resolve, reject) => {
		$.ajax({ url: url,
		    type: 'POST',
		    dataType: dataType,
		    beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
		    data: postData,
		    success: (response) => {
		    	return resolve({response:response})
		    },
		    error: (response) => {
		    	//alert(`Error fetching ${url}`)
		    	console.log(`Error fetching ${url}`)
		    	console.log(response)
		    	return reject({msg:'ERROR ajaxPromise 1',error:response})
		    }
		});
	})

	return reject({msg:`RARE SERVER ERROR fetching {$url}`,error:'ERROR INFO'})
}

function postDiffCode(t1,t2) {
	var url = "<%= feedbacker.admin_html_diff_url %>";
		let postData = {t1:t1,t2:t2}

		let res = getTextDiff(url,postData,'json')
		.then((result) => {
			console.log(result.response)
			let responseHtml = result.response.html
			//$("#diffedText").html('diffed result HERE')

			$("#showDiff").addClass('show').removeClass('hide')
			$("#diffedText").html(responseHtml)


	    })



}

function HtmlEncode(s)
{
  var el = document.createElement("div");
  el.innerText = el.textContent = s;
  s = el.innerHTML;
  return s;
}

function wrapCode(html,doEncode) {
/*
<pre><code>
&lt;script&gt;
function test() {
	var testVar = '123';
}
&lt;/script&gt;
</code>
</pre>
*/

	return `<pre style='background-color:black;'><code id="sandBoxCode" style="white-space: pre-wrap;"">${doEncode ? HtmlEncode(html) : html}</code></pre>`
}




/**
 * simpleValidateHtmlStr
 * 
 * checks html string tag by tag if valid, trys html string to render as dom, compares theoretically to be created tag count with 
 * actually rendered html dom tag count
 * returns true if validated html is same as entered html
 * returns false if one of the tests failes
 * returns normalized html str if validated html is not equal to entered html
 *
 * kudos
 *	- http://www.mkyong.com/regular-expressions/how-to-validate-html-tag-with-regular-expression/
 *	- https://stackoverflow.com/questions/10026626/check-if-html-snippet-is-valid-with-javascript#14216406
 *
 * @param	htmlStr	string with html snippet
 * @param	strictBoolean if true, <br/> >> <br> and empty attribute conversion are not ignored
 */

function simpleValidateHtmlStr(htmlStr, strictBoolean) {
  if (typeof htmlStr !== "string")
    return false;

  var validateHtmlTag = new RegExp("<[a-z]+(\s+|\"[^\"]*\"\s?|'[^']*'\s?|[^'\">])*>", "igm"),
    sdom = document.createElement('div'),
    noSrcNoAmpHtmlStr = htmlStr
    	.replace(/ src=/, " svhs___src=")
      .replace(/&amp;/igm, "#svhs#amp##"),
    noSrcNoAmpIgnoreScriptContentHtmlStr = noSrcNoAmpHtmlStr
    	.replace(/\n\r?/igm, "#svhs#nl##") // temporarily remove line breaks
      .replace(/(<script[^>]*>)(.*?)(<\/script>)/igm, "$1$3")
      .replace(/#svhs#nl##/igm, "\n\r"),  // re-add line breaks
    htmlTags = noSrcNoAmpIgnoreScriptContentHtmlStr.match(/<[a-z]+[^>]*>/igm),
    htmlTagsCount = htmlTags ? htmlTags.length : 0,
    tagsAreValid, resHtmlStr;
    
    console.log(noSrcNoAmpHtmlStr, noSrcNoAmpIgnoreScriptContentHtmlStr, htmlTags);
    
  if(!strictBoolean){
  	// ignore <br/> conversions
  	noSrcNoAmpHtmlStr = noSrcNoAmpHtmlStr.replace(/<br\s*\/>/, "<br>")
  }

  if (htmlTagsCount) {
    tagsAreValid = htmlTags.reduce(function(isValid, tagStr) {
      return isValid && tagStr.match(validateHtmlTag);
    }, true);

    if (!tagsAreValid) {
      return false;
    }
  }


  try {
    sdom.innerHTML = noSrcNoAmpHtmlStr;
  } catch (err) {
    return false;
  }

  if (sdom.querySelectorAll("*").length !== htmlTagsCount) {
    return false;
  }

  resHtmlStr = sdom.innerHTML.replace(/&amp;/igm, "&"); // undo '&' encoding
  
  if(!strictBoolean){
  	// ignore empty attribute normalizations
  	resHtmlStr = resHtmlStr.replace(/=""/, "")
  }

  // compare html strings while ignoring case, quote-changes, trailing spaces
  var
    simpleIn = noSrcNoAmpHtmlStr.replace(/["']/igm, "").replace(/\s+/igm, " ").toLowerCase().trim(),
    simpleOut = resHtmlStr.replace(/["']/igm, "").replace(/\s+/igm, " ").toLowerCase().trim();
  if (simpleIn === simpleOut)
    return true;

  console.log(simpleIn, simpleOut);

  return resHtmlStr.replace(/ svhs___src=/igm, " src=").replace(/#svhs#amp##/, "&amp;");
}

// --------------- TESTS --------------------------------------------

var tests = [
  "<b></b>",
  "<br/>",
  "<br>",
  "<br />",
  "<p>",
  "<p>Test<P>test",
  "<a href='test'>test</a>",
  "<a id='blue' id='red'>double attribute</a>",
  "<a href='test 2'><b>formatted line \nbreak</b></a>",
  "<p class='red blue' data-attr='some val'>a paragraph without end",
  "<p class='red blue' data-attr>a paragraph with empty attribute</p>",
  "<h1>title</h1><p>multiple elements <b>with children</b></p>",
  "<h1>bad title</h2>",
  "<a>hell<B>o</B></a>",
  '<a href="test.html">hell<b>o</b></a>',
  '<a href=test.html>hell<b>o</b></a>',
  "<a href='test.html'>hell<b>o</b></a>",
  '<ul><li>hell</li><li>hell</li></ul>',
  '<ul><li>hell<li>hell</ul>',
  "<a href='test class='green'>bad attribute</a>",
  "<a href='test' missing closing '&gt;'</a>",
  "< a href='test'>space on tag start</a>",
  "<a href='test'>space on tag close< /a>",
  '<div ng-if="enabled && valid">ampersands in attributes</div>',
  '<div>ampersands in text &&</div>',
  '<div>ampersands in text && and encoded &amp;</div>',
  '<div></div><div some-attr="sad">woops<p id=two>sad</p></div>'
];

$('[type="test/template"]').each(function(i, elm) {
	switch(elm.tagName){
  	case "TEXTAREA":
    tests.push(elm.value);
    break;
    default:
    tests.push(elm.innerHTML);
    break;
  }
  
})

//runHtmlCheckTests(tests)


function debounce(func, timeout = 300){
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => { func.apply(this, args); }, timeout);
  };
}

const processHtmlChange = debounce(() => doCheckHtml());


//compare the code, do a diff
function doCheckHtml() {
	console.log('checking HTML')
	let htmlToCheck = []

	$('#editor').each(function(i, elm) {
			switch(elm.tagName){
		  	case "TEXTAREA":
		    	htmlToCheck.push(elm.value);
		    break;
		    default:
		    	htmlToCheck.push(elm.innerHTML);
		    break;
		  }
	})
	$('#testresults').html('')
	let testResults = runHtmlCheckTests(htmlToCheck)
	let testResult = testResults[0]

	$("#checkHtmlStatus").html(testResult.result)
	postDiffCode(testResult.html1,testResult.html2)

}

function runHtmlCheckTests(tests) {
	let results = []

	tests.forEach(function(htmlStr, i) {
	  let resultObj = runHtmlCheckTest(htmlStr)
	  results.push(resultObj)  
	})
	return results
}

function runHtmlCheckTest(htmlStr) {
	var res = simpleValidateHtmlStr(htmlStr),
    resStr = res === true ? "<span class='text-success fw-bold'>PASS</span>" :
    res === false ? "<span class='text-danger fw-bold'>FAIL</span>" :
    "<span class='text-warning'>NORMALIZED</span>",
    resStrict = simpleValidateHtmlStr(htmlStr, true),
    resStrictStr = resStrict === true ? "<span class='text-success fw-bold'>PASS</span>" :
    resStrict === false ? "<span class='text-danger fw-bold'>FAIL</span>" :
    "<span class='text-warning'>NORMALIZED</span>",
    wasNormalized = typeof resStrict !== "boolean";


    let originalText = htmlStr.replace(/</igm, "&lt;").replace(/>/igm, "&gt;")
    let normalizedText = originalText
	if (typeof resStrict == "string")
 	{
	    normalizedText = resStrict.replace(/</igm, "&lt;").replace(/>/igm, "&gt;")
	}
	 $('#testresults').append($('<li>' + resStrictStr + " (<span title='not strict'>" + resStr + "</span>)<br> &nbsp;&nbsp; <div id='textOriginal'>" + originalText + "</div>" + (wasNormalized ? ('<br><span class="text-muted">-></span> ' + "<div id='textNormalized'>" + normalizedText +"</div>") : "") + '</li>'));

  return {result:resStr,original:originalText,normalized:normalizedText,html1:htmlStr,html2:resStrict}

}
</script>