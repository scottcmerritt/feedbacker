<% comments = commentable.root_comments.sort_by{|row| row.created_at}.reverse if local_assigns[:comments].nil? %>
<% with_wrap = true if local_assigns[:with_wrap].nil? %>

<% if with_wrap %><div class="feedbacker_comments"><% end %>

<% form_locals = {new_comment: new_comment} %>
<% form_locals = form_locals.merge(local_assigns[:values]) unless local_assigns[:values].nil? %>



<% if false %>
<% word_no = respond_to?(:dbt) ? dbt("comments.no",d:"no") : "no" %>
<% word_comments = respond_to?(:dbt) ? dbt("comments.comments",d:"comments") : "comments" %>
<% word_comment = respond_to?(:dbt) ? dbt("comments.comment",d:"comment") : "comment" %>
<% word_comment = respond_to?(:dbt) ? dbt("comments.yet",d:"yet") : "yet" %>
<% end %>

<div class="comments-header">
  <% if false %>
  <h6 class="mt-1">
    <% if commentable.comment_threads.count == 0 %>

    <% elsif commentable.comment_threads.count == 1 %>

    <% elsif commentable.comment_threads.count > 1 %>

    <% end %>
    <%= commentable.comment_threads.count == 0 ? "no" : commentable.comment_threads.count %> <%= "comment".pluralize(commentable.comment_threads.count) %>
  </h6>
  <% end %>
</div>
<%= render partial: "comments/form", locals: form_locals %>
<div class="comments-container rounded">
  <% if commentable.root_comments.length == 0 %>
  <div class="alert alert-info">Be the first to comment</div>
  <% else %>

  <% begin %>
  <%= render partial: "comments/reply", locals: {comments: comments,new_comment: new_comment} %>
  <% rescue Exception=> ex %><%= ex %>
  <% end %>
  <% end %>
</div>
<% if with_wrap %></div><% end %>