<% use_and_match = "false" if local_assigns[:use_and_match].nil? %>
<script type="text/javascript"> 

function debounce(func, timeout = 300){
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => { func.apply(this, args); }, timeout);
  };
}
function saveInput(){
  console.log('Saving data');
}
const processChange = debounce(() => saveInput());


function updateHighlights(query) {
  if(typeof highlightResults === 'function') {
    highlightResults(query,'#translateKeysIndex')
    moveCursorToEnd('#search-translations')
  }
    
}

function moveCursorToEnd(elementId) {
    $(elementId).focus()
    setTimeout(function(){
        const input = document.querySelector(elementId);
        input.selectionStart = input.selectionEnd = input.value.length;
        input.focus();
    }, 0)
}

  //does the text of an element match the var: txt?
  
var useAndMatch = <%= use_and_match.to_s %> //if false, then it is an OR match
var useAndAttrMatch = false

  function textMatches(div,txt)
  {
    if(txt == undefined || txt == '')
      return true
    if(div.text() == undefined)
      return false
    console.log(`Comparing ${div.text()} to ${txt}`)

    return (div.text().toLowerCase().indexOf(txt.toLowerCase()) > -1)
  }
  //does the attribute of an element match the var: txt?
  function attrMatches(div,attrName,txt) {
    //TODO: handle an array ALSO
    if(!txt || txt == '' || (Array.isArray(txt) && txt.length == 0))
      return true

    // if the attribute has no VALUE, return FALSE
    if(div.attr(attrName) == undefined)
      return false

    if(Array.isArray(txt)) { //array of at least length 1
      var matchCount = 0
      for(i=0;i<txt.length;i++)
      {
        var iTxt = txt[i]
        
        console.log(`Comparing ${div.attr(attrName)} to ${iTxt}`)
        if(div.attr(attrName).indexOf(iTxt) > -1)
        {
          if(useAndAttrMatch)
          {
           matchCount+=1 
          }
          else {
            return true
          }
        }
        else {
          if(useAndAttrMatch)
            return false
        }
      }
      if(useAndAttrMatch)
        return matchCount == txt.length
      return false
    }

    return (div.attr(attrName).indexOf(txt) > -1)
  }

	function setupRealTimeTranslate() {

var $searchBox = $('#search-translations');
var $browseDivs = $('.search-data a');
var $browseCols = $('.search-data .search-row');
var $filterLangs = $('.filter-lang')

var $filterTranslated = $('#showTranslatedKeys');

function updateCounts() {
  var list = $("#listSummary")
  list.removeClass('d-none')
  list.find('.totalCount').html($browseCols.length)
  let visibleRows = $browseCols.filter(function () {
    return !$(this).hasClass('d-none')
}).length;
  list.find('.rowCount').html(visibleRows)

}
function getLangQuery() {
  var res = []
  $filterLangs.each(function() {
    if($(this).is(':checked'))
      res.push($(this).val())
  })
  return res
//  return ['en','es']
}

const delayedFilterRun = debounce(()=>{
  //runTranslateFilter($searchBox.eq(0),$searchBox.value,false)
  updateHighlights($searchBox.val())
})
$searchBox.on('input',function() {
  var textQuery = this.value
  runTranslateFilter(this,textQuery)
  delayedFilterRun()
/*
  debounce(()=>{
    runTranslateFilter(this,textQuery)
  },300)
*/
})

$filterLangs.on('input',function() {
  runTranslateFilter($searchBox,$searchBox.val())
})

$filterTranslated.on('input',function() {
  console.log(`SHOW TRANSLATED: ${showTranslatedKeys()}`)
  runTranslateFilter($searchBox,$searchBox.val())
})



var showTranslatedKeys = function() {

  
  //if($filterTranslated.attr('checked') == undefined)
  //  return false
  console.log(`filterTranslated: ${$filterTranslated.val()}`)
  return $filterTranslated.is(':checked') //attr('checked') == 'true' ? true : false
}

var runTranslateFilter = function(scope,textQuery,reloadHighlight=false) {
  //var scope = this;
  
  var attrLookup = showTranslatedKeys() ? 'completed' : 'needed'
  $("#searchExplained").html(attrLookup)
  var langQuery = getLangQuery() //undefined //'en'
$("#searchExplained").html(`Filtering for: ${textQuery}, WITH languages (${attrLookup}) ${langQuery.toString()}`)
  

  $browseDivs.removeClass('d-none');
  $browseCols.removeClass('d-none');


  /*
  if ((!langQuery || (Array.isArray(langQuery) && langQuery.length == 0)) && (!textQuery || textQuery == '')) {
    //$browseDivs.show();
    $browseDivs.removeClass('d-none');
    $browseCols.removeClass('d-none');
    return;
  }
  */

  // match on the A tags/links
  // .search-data a
  $browseDivs.each(function(i, div) {
    var $div = $(div);
    //let divText = $div.text()
    
    //$div.toggle($div.text().toLowerCase().indexOf(scope.value.toLowerCase()) > -1);
    if(textMatches($div,textQuery)) // && attrMatches($div,attrLookup,langQuery))
    {
    	$div.closest('.search-row').removeClass('d-none')
    }
    else {
      console.log(`hiding search-row: ${$div.text()}`)
      if(useAndMatch)
      	$div.closest('.search-row').addClass('d-none')
    }
  })

  // .search-data .search-row
  $browseCols.each(function(i, div) {
    var $div = $(div);
    let divText = $div.text()

    if(textMatches($div,textQuery)) // && attrMatches($div,attrLookup,langQuery))
    {
        $div.removeClass('d-none')
    }
    else {
      //if(useAndMatch)
      //$div.addClass('d-none')

    }

  })


    // specific match on the search-row div (and attributes)
   $browseCols.each(function(i, div) {
    var $div = $(div);
    let divText = $div.text()
    //console.log('inside browseCols')
    //console.log(divText)
    //$div.toggle($div.text().toLowerCase().indexOf(scope.value.toLowerCase()) > -1);
    
    if(attrMatches($div,attrLookup,langQuery))
    {
      if(!useAndMatch)
        $div.removeClass('d-none')
    }
    else {
      if(useAndMatch)
        $div.addClass('d-none')
    }
  

  })

   updateCounts()

  //if(reloadHighlight)
  //  updateHighlights($searchBox.val())
  

}

}

jQuery(document).ready(function($) {
	setupRealTimeTranslate()
})

</script>